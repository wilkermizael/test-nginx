version: '3.8'

services:
  app:
    container_name: whatsapp_web_api
    # build: .
    image: chrishubert/whatsapp-web-api:latest # Pull the image from Docker Hub
    volumes:
      - api_sessions:/usr/src/app/sessions # Mount the local ./sessions/ folder to the container's /usr/src/app/sessions folder
    environment:
      # - API_KEY=your_global_api_key_here  # OPTIONAL
      - BASE_WEBHOOK_URL=http://api.winikii.com/localCallbackExample
      - ENABLE_LOCAL_CALLBACK_EXAMPLE=TRUE # OPTIONAL, NOT RECOMMENDED FOR PRODUCTION
      - MAX_ATTACHMENT_SIZE=5000000 # IN BYTES
      - SET_MESSAGES_AS_SEEN=TRUE # WILL MARK THE MESSAGES AS READ AUTOMATICALLY
      # ALL CALLBACKS: auth_failure|authenticated|call|change_state|disconnected|group_join|group_leave|group_update|loading_screen|media_uploaded|message|message_ack|message_create|message_reaction|message_revoke_everyone|qr|ready|contact_changed
      - DISABLED_CALLBACKS=message_ack|message_reaction  # PREVENT SENDING CERTAIN TYPES OF CALLBACKS BACK TO THE WEBHOOK
      - ENABLE_SWAGGER_ENDPOINT=TRUE # OPTIONAL, ENABLES THE /api-docs ENDPOINT
      # - RATE_LIMIT_MAX=1000 # OPTIONAL, THE MAXIUM NUMBER OF CONNECTIONS TO ALLOW PER TIME FRAME
      # - RATE_LIMIT_WINDOW_MS=1000 # OPTIONAL, TIME FRAME FOR WHICH REQUESTS ARE CHECKED IN MS
      # - WEB_VERSION='2.2328.5' # OPTIONAL, THE VERSION OF WHATSAPP WEB TO USE
      # - WEB_VERSION_CACHE_TYPE=none # OPTIONAL, DETERMINES WHERE TO GET THE WHATSAPP WEB VERSION(local, remote or none), DEFAULT 'none'
      # - RECOVER_SESSIONS=TRUE # OPTIONAL, SHOULD WE RECOVER THE SESSION IN CASE OF PAGE FAILURES
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "0.2"
          memory: 100M
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.api_sessions.rule=Host(`evo.winikii.com`)
        - traefik.http.routers.api_sessions.entrypoints=websecure
        - traefik.http.routers.api_sessions.tls.certresolver=le
        - traefik.http.routers.api_sessions.service=api_sessions
        - traefik.http.services.api_sessions.loadbalancer.server.port=3001
      restart_policy:
        condition: on-failure
    networks:
      - traefik_public

networks:
  traefik_public:
    external: true
volumes: 
  api_sessions:
    external: true